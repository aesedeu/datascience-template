stages:
  # - test
  - build
  - deploy

docker-build:
  image: docker:cli
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$DOCKER_IMAGE_NAME" .
    - docker push "$DOCKER_IMAGE_NAME"
  rules:
    - if: '$CI_COMMIT_BRANCH == "pred_prod"'
      variables:
        DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
      exists:
        - Dockerfile
    - if: '$CI_COMMIT_BRANCH == "main"'
      variables:
        DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:latest
      exists:
        - Dockerfile
    - when: never  # Disable job for other branches

deploy-test:
  stage: deploy
  image: ubuntu:latest
  variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    APP_NAME: {{cookiecutter.project_name}}
  before_script:
    - apt-get update && apt install -y openssh-client
    - chmod 400 $TEST_SSH_PRIVATE_KEY
  script:
    - ssh -o StrictHostKeyChecking=no -i $TEST_SSH_PRIVATE_KEY $TEST_DEPLOY_USER@$TEST_DEPLOY_HOST "
      docker stop $APP_NAME || true &&
      docker rm $APP_NAME || true &&
      docker rmi $DOCKER_IMAGE_NAME || true &&
      docker pull $DOCKER_IMAGE_NAME &&
      docker run -d -p 8000:8000 --name $APP_NAME $DOCKER_IMAGE_NAME
      "
  rules:
    - if: '$CI_COMMIT_BRANCH == "pred_prod"'

deploy-main:
  stage: deploy
  image: ubuntu:latest
  variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:latest
    APP_NAME: {{cookiecutter.project_name}}
  before_script:
    - apt-get update && apt install -y openssh-client
    - chmod 400 $SSH_PRIVATE_KEY
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY $DEPLOY_USER@$DEPLOY_HOST "
      docker stop $APP_NAME || true &&
      docker rm $APP_NAME || true &&
      docker rmi $DOCKER_IMAGE_NAME || true &&
      docker pull $DOCKER_IMAGE_NAME &&
      docker run -d -p 8000:8000 --name $APP_NAME $DOCKER_IMAGE_NAME
      "
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
